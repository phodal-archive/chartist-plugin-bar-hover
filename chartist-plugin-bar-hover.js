(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    define([], function () {
      return root.returnExportsGlobal = factory();
    });
  } else if (typeof exports === 'object') {
    module.exports = factory();
  } else {
    root['Chartist.plugins.barhover'] = factory();
  }
})(this, function () {
  /* global Chartist */
  (function (window, document, Chartist) {
    'use strict';

    Chartist.plugins = Chartist.plugins || {};
    Chartist.plugins.barhover = function () {

      return function barhover(chart) {
        var barColorChangeSelector = 'ct-point';
        if (chart instanceof Chartist.Bar) {
          barColorChangeSelector = 'ct-bar';
        }

        var $chart = chart.container;

        function on(event, selector, callback) {
          $chart.addEventListener(event, function (e) {
            if (!selector || hasClass(e.target, selector)) callback(e);
          });
        }

        on('mouseover', barColorChangeSelector, function (event) {
          var $point = event.target;
          $($point).attr("style", "stroke: #ed312f");
        });

        on('mouseout', barColorChangeSelector, function (event) {
          var $point = event.target;
          $($point).attr("style", "none");
        });

        function hasClass(element, className) {
          return (' ' + element.getAttribute('class') + ' ').indexOf(' ' + className + ' ') > -1;
        }
      };
    };
  })(window, document, Chartist);

  return Chartist.plugins.barhover;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9jb21wb25lbnRzL2NvbW1vbnMvcmVkZWVtYWJsZS1jaGFydGlzdC1wbHVnaW4vaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUMsV0FBVSxJQUFWLEVBQWdCLE9BQWhCLEVBQXlCO0FBQ3hCLE1BQUksT0FBTyxNQUFQLEtBQWtCLFVBQWxCLElBQWdDLE9BQU8sR0FBM0MsRUFBZ0Q7QUFDOUMsV0FBTyxFQUFQLEVBQVcsWUFBWTtBQUNyQixhQUFRLEtBQUssbUJBQUwsR0FBMkIsU0FBbkM7QUFDRCxLQUZEO0FBR0QsR0FKRCxNQUlPLElBQUksT0FBTyxPQUFQLEtBQW1CLFFBQXZCLEVBQWlDO0FBQ3RDLFdBQU8sT0FBUCxHQUFpQixTQUFqQjtBQUNELEdBRk0sTUFFQTtBQUNMLFNBQUssaUNBQUwsSUFBMEMsU0FBMUM7QUFDRDtBQUNGLENBVkEsRUFVQyxJQVZELEVBVU8sWUFBWTs7QUFFakIsYUFBVSxNQUFWLEVBQWtCLFFBQWxCLEVBQTRCLFFBQTVCLEVBQXNDO0FBQ3JDOztBQUVBLGFBQVMsT0FBVCxHQUFtQixTQUFTLE9BQVQsSUFBb0IsRUFBdkM7QUFDQSxhQUFTLE9BQVQsQ0FBaUIsY0FBakIsR0FBa0MsWUFBWTs7QUFFNUMsYUFBTyxTQUFTLGNBQVQsQ0FBd0IsS0FBeEIsRUFBK0I7QUFDcEMsWUFBSSx5QkFBeUIsVUFBN0I7QUFDQSxZQUFJLGlCQUFpQixTQUFTLEdBQTlCLEVBQW1DO0FBQ2pDLG1DQUF5QixRQUF6QjtBQUNEOztBQUVELFlBQUksU0FBUyxNQUFNLFNBQW5COztBQUVBLGlCQUFTLEVBQVQsQ0FBWSxLQUFaLEVBQW1CLFFBQW5CLEVBQTZCLFFBQTdCLEVBQXVDO0FBQ3JDLGlCQUFPLGdCQUFQLENBQXdCLEtBQXhCLEVBQStCLFVBQVUsQ0FBVixFQUFhO0FBQzFDLGdCQUFJLENBQUMsUUFBRCxJQUFhLFNBQVMsRUFBRSxNQUFYLEVBQW1CLFFBQW5CLENBQWpCLEVBQ0UsU0FBUyxDQUFUO0FBQ0gsV0FIRDtBQUlEOztBQUVELFdBQUcsV0FBSCxFQUFnQixzQkFBaEIsRUFBd0MsVUFBVSxLQUFWLEVBQWlCO0FBQ3ZELGNBQUksU0FBUyxNQUFNLE1BQW5CO0FBQ0EsWUFBRSxNQUFGLEVBQVUsSUFBVixDQUFlLE9BQWYsRUFBd0IsaUJBQXhCO0FBQ0QsU0FIRDs7QUFLQSxXQUFHLFVBQUgsRUFBZSxzQkFBZixFQUF1QyxVQUFVLEtBQVYsRUFBaUI7QUFDdEQsY0FBSSxTQUFTLE1BQU0sTUFBbkI7QUFDQSxZQUFFLE1BQUYsRUFBVSxJQUFWLENBQWUsT0FBZixFQUF3QixNQUF4QjtBQUNELFNBSEQ7O0FBS0EsaUJBQVMsUUFBVCxDQUFrQixPQUFsQixFQUEyQixTQUEzQixFQUFzQztBQUNwQyxpQkFBTyxDQUFDLE1BQU0sUUFBUSxZQUFSLENBQXFCLE9BQXJCLENBQU4sR0FBc0MsR0FBdkMsRUFBNEMsT0FBNUMsQ0FBb0QsTUFBTSxTQUFOLEdBQWtCLEdBQXRFLElBQTZFLENBQUMsQ0FBckY7QUFDRDtBQUNGLE9BNUJEO0FBNkJELEtBL0JEO0FBaUNELEdBckNBLEVBcUNDLE1BckNELEVBcUNTLFFBckNULEVBcUNtQixRQXJDbkIsQ0FBRDs7QUF1Q0EsU0FBTyxTQUFTLE9BQVQsQ0FBaUIsY0FBeEI7QUFFRCxDQXJEQSxDQUFEIiwiZmlsZSI6ImFwcC9jb21wb25lbnRzL2NvbW1vbnMvcmVkZWVtYWJsZS1jaGFydGlzdC1wbHVnaW4vaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbXSwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIChyb290LnJldHVybkV4cG9ydHNHbG9iYWwgPSBmYWN0b3J5KCkpO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICB9IGVsc2Uge1xuICAgIHJvb3RbJ0NoYXJ0aXN0LnBsdWdpbnMuYmFyQ29sb3JDaGFuZ2UnXSA9IGZhY3RvcnkoKTtcbiAgfVxufSh0aGlzLCBmdW5jdGlvbiAoKSB7XG4gIC8qIGdsb2JhbCBDaGFydGlzdCAqL1xuICAoZnVuY3Rpb24gKHdpbmRvdywgZG9jdW1lbnQsIENoYXJ0aXN0KSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgQ2hhcnRpc3QucGx1Z2lucyA9IENoYXJ0aXN0LnBsdWdpbnMgfHwge307XG4gICAgQ2hhcnRpc3QucGx1Z2lucy5iYXJDb2xvckNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGJhckNvbG9yQ2hhbmdlKGNoYXJ0KSB7XG4gICAgICAgIHZhciBiYXJDb2xvckNoYW5nZVNlbGVjdG9yID0gJ2N0LXBvaW50JztcbiAgICAgICAgaWYgKGNoYXJ0IGluc3RhbmNlb2YgQ2hhcnRpc3QuQmFyKSB7XG4gICAgICAgICAgYmFyQ29sb3JDaGFuZ2VTZWxlY3RvciA9ICdjdC1iYXInO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyICRjaGFydCA9IGNoYXJ0LmNvbnRhaW5lcjtcblxuICAgICAgICBmdW5jdGlvbiBvbihldmVudCwgc2VsZWN0b3IsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgJGNoYXJ0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBpZiAoIXNlbGVjdG9yIHx8IGhhc0NsYXNzKGUudGFyZ2V0LCBzZWxlY3RvcikpXG4gICAgICAgICAgICAgIGNhbGxiYWNrKGUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgb24oJ21vdXNlb3ZlcicsIGJhckNvbG9yQ2hhbmdlU2VsZWN0b3IsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHZhciAkcG9pbnQgPSBldmVudC50YXJnZXQ7XG4gICAgICAgICAgJCgkcG9pbnQpLmF0dHIoXCJzdHlsZVwiLCBcInN0cm9rZTogI2VkMzEyZlwiKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgb24oJ21vdXNlb3V0JywgYmFyQ29sb3JDaGFuZ2VTZWxlY3RvciwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgdmFyICRwb2ludCA9IGV2ZW50LnRhcmdldDtcbiAgICAgICAgICAkKCRwb2ludCkuYXR0cihcInN0eWxlXCIsIFwibm9uZVwiKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZnVuY3Rpb24gaGFzQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKSB7XG4gICAgICAgICAgcmV0dXJuICgnICcgKyBlbGVtZW50LmdldEF0dHJpYnV0ZSgnY2xhc3MnKSArICcgJykuaW5kZXhPZignICcgKyBjbGFzc05hbWUgKyAnICcpID4gLTE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gIH0od2luZG93LCBkb2N1bWVudCwgQ2hhcnRpc3QpKTtcblxuICByZXR1cm4gQ2hhcnRpc3QucGx1Z2lucy5iYXJDb2xvckNoYW5nZTtcblxufSkpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
